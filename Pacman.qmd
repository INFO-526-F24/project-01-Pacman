---
title: "Pacman"
subtitle: "Project"
editor: visual
---

### Loading necessary libraries

```{r}
#| label: load-pkgs
#| message: false
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(scales)
library(plotly)

```

### Data Initialization

```{r}
#| label: load-dataset
#| message: false
data <- read.csv("data/Different_stores_dataset.csv")
glimpse(data)

```

### Data Preprocessing

```{r}
#| label: data-preprocessing
#| message: false

sum(is.na(data))

# Check unique values for categorical columns
unique(data$category)
unique(data$region)
unique(data$segment)

# Convert order_date and ship_date to date format
data$order_date <- as.Date(data$order_date, format = "%m/%d/%Y")
data$ship_date <- as.Date(data$ship_date, format = "%m/%d/%Y")

# Extract Year, Month, and Season from order_date
data$year <- year(data$order_date)
data$month <- month(data$order_date)
data$season <- case_when(
  data$month %in% c(12, 1, 2) ~ "Winter",
  data$month %in% c(3, 4, 5) ~ "Spring",
  data$month %in% c(6, 7, 8) ~ "Summer",
  data$month %in% c(9, 10, 11) ~ "Fall"
)

# Calculate total sales and profit margins
data <- data %>%
  mutate(
    total_sales = sales * quantity,
    profit_margin = profit / sales * 100
  )

# Handle any missing or negative values
data <- data %>%
  filter(!is.na(total_sales) & !is.na(profit_margin))

# Group data by season, category, and region
aggregated_data <- data %>%
  group_by(season, category, region, segment) %>%
  summarise(
    avg_discount = mean(discount, na.rm = TRUE),
    total_sales = sum(total_sales, na.rm = TRUE),
    avg_profit_margin = mean(profit_margin, na.rm = TRUE),
    .groups = 'drop'
  )

# Normalize total_sales
data$total_sales_normalized <- (data$total_sales - min(data$total_sales, na.rm = TRUE)) /
                               (max(data$total_sales, na.rm = TRUE) - min(data$total_sales, na.rm = TRUE))

# Ensure categorical variables are treated as factors
data$category <- as.factor(data$category)
data$segment <- as.factor(data$segment)
data$region <- as.factor(data$region)
data$season <- factor(data$season, levels = c("Winter", "Spring", "Summer", "Fall"))
```

### Question 1: Seasonal Trends and Sales Performance:

```{r}


# Prepare data: Assuming `data` contains `month`, `category`, and `total_sales`
monthly_sales <- data %>%
  group_by(month, category) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

# Create the enhanced plot with a legend title
ggplot(monthly_sales, aes(x = month, y = total_sales, color = category)) +
  geom_line(size = 1) +                             
  geom_point(size = 2) +                            
  geom_smooth(method = "lm", se = FALSE,         
              linetype = "solid", color = "black", linewidth = 0.2) +
  labs(
    title = "Monthly Sales Trends by Category",
    x = "Month",
    y = "Total Sales",
    color = "Product Category") +
  theme_minimal(base_size = 14) +                   
  theme(
    plot.title = element_text(hjust = 0.5,          
                              size = 16),
    axis.text.x = element_text(size = 12),          
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),           
    panel.grid.major.x = element_blank(),          
    panel.grid.major.y = element_line(color = "gray", 
                                      linetype = "dashed"), 
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 12)     
  ) +
  scale_color_brewer(palette = "Set2") +           
  scale_x_continuous(breaks = 1:12, labels = 1:12) + 
  scale_y_continuous(labels = comma)              



```

```{r}
# Bar plot for seasonal sales variations segmented by region (malls)
seasonal_sales_malls <- data %>%
  group_by(season, region) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

ggplot(seasonal_sales_malls, aes(x = season, y = total_sales, fill = region)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Seasonal Sales Variations by Region (Malls)", x = "Season", y = "Total Sales", fill = "Region") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set2") +
  theme(plot.title = element_text(hjust = 0.5), # Center the title
        legend.title = element_text()) # Make legend title bold
```

```{r}
# Bar plot for seasonal sales across categories
seasonal_category_sales <- data %>%
  group_by(season, category) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

ggplot(seasonal_category_sales, aes(x = season, y = total_sales, fill = category)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Seasonal Sales Across Categories", x = "Season", y = "Total Sales") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3") +
  theme(legend.title = element_blank())
```

```{r}
# Faceted bar plot for seasonal sales across regions and categories
faceted_data <- data %>%
  group_by(season, category, region) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

ggplot(faceted_data, aes(x = season, y = total_sales, fill = category)) +
  geom_bar(stat="identity", position="dodge") +
  facet_wrap(~region) +
  labs(title="Seasonal Sales Across Categories and Regions (Malls)", x="Season", y="Total Sales") +
  theme_minimal() +
  scale_fill_brewer(palette="Set3") +
  theme(legend.title=element_blank())
 
```

### Question 2:

```{r}
library(ggplot2)
library(dplyr)
library(reshape2)
library(plotly)

# Ensure necessary columns are included in the dataset
data <- data %>%
  mutate(
    discount_percentage = (selling_price_per_unit - cost_price_per_unit) / selling_price_per_unit * 100,
    profit_margin = (selling_price_per_unit - cost_price_per_unit) * quantity,
    total_sales = selling_price_per_unit * quantity
  )

# 1. Calculate and Analyze Discount Percentages
discount_analysis <- data %>%
  group_by(category) %>%
  summarise(
    avg_discount = mean(discount_percentage, na.rm = TRUE),
    avg_sales_volume = mean(quantity, na.rm = TRUE),
    avg_profit_margin = mean(profit_margin, na.rm = TRUE),
    .groups = "drop"
  )

ggplot(discount_analysis, aes(x = category, y = avg_discount, fill = category)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Discount Percentage by Category", x = "Category", y = "Average Discount (%)") +
  theme_minimal() +
  theme(legend.position = "none")

# 2. Correlation of Discounts with Sales Volumes
ggplot(data, aes(x = discount_percentage, y = quantity)) +
  geom_point(alpha = 0.5, color = "blue") +
  geom_smooth(method = "lm", color = "red") +
  labs(title = "Correlation of Discounts with Sales Volumes", x = "Discount Percentage", y = "Sales Volume") +
  theme_minimal()

# 3. Profit Margins Post-Discounts
profit_analysis <- data %>%
  group_by(category) %>%
  summarise(
    total_profit_margin = sum(profit_margin, na.rm = TRUE),
    total_sales_volume = sum(quantity, na.rm = TRUE),
    .groups = "drop"
  )

ggplot(profit_analysis, aes(x = category, y = total_profit_margin, fill = category)) +
  geom_bar(stat = "identity") +
  labs(title = "Profit Margins by Category Post-Discount", x = "Category", y = "Profit Margin") +
  theme_minimal() +
  theme(legend.position = "none")

# 4. Correlation Analysis Among Discounts, Volumes, and Margins
correlation_data <- data %>%
  select(discount_percentage, quantity, profit_margin) %>%
  na.omit()

correlation_matrix <- cor(correlation_data)

# Visualize the Correlation Matrix
corr_melt <- melt(correlation_matrix)
ggplot(corr_melt, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  labs(title = "Correlation Matrix", x = "", y = "", fill = "Correlation") +
  theme_minimal()

# 5. 3D Scatter Plot for Discounts, Volumes, and Profit Margins
plot_ly(data = data, x = ~discount_percentage, y = ~quantity, z = ~profit_margin, 
        type = "scatter3d", mode = "markers",
        marker = list(size = 3, color = ~profit_margin, colorscale = "Viridis")) %>%
  layout(title = "3D Scatter Plot: Discounts, Volumes, and Profit Margins",
         scene = list(
           xaxis = list(title = "Discount Percentage"),
           yaxis = list(title = "Sales Volume"),
           zaxis = list(title = "Profit Margin")
         ))

```
