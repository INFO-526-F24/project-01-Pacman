---
title: "Pacman"
subtitle: "Project"
editor: visual
execute: 
  warning: false
  message: false
---

### Loading necessary libraries

```{r}
#| label: load-pkgs
#| message: false

# Load the necessary libraries
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(scales)
library(plotly)
```

### Data Initialization

```{r}
#| label: load-dataset
#| message: false
data <- read.csv("data/Different_stores_dataset.csv")
glimpse(data)

```

### Data Preprocessing

```{r}
#| label: data-preprocessing
#| message: false

sum(is.na(data))

# Check unique values for categorical columns
unique(data$category)
unique(data$region)
unique(data$segment)

# Convert order_date and ship_date to date format
data$order_date <- as.Date(data$order_date, format = "%m/%d/%Y")
data$ship_date <- as.Date(data$ship_date, format = "%m/%d/%Y")

# Extract Year, Month, and Season from order_date
data$year <- year(data$order_date)
data$month <- month(data$order_date)
data$season <- case_when(
  data$month %in% c(12, 1, 2) ~ "Winter",
  data$month %in% c(3, 4, 5) ~ "Spring",
  data$month %in% c(6, 7, 8) ~ "Summer",
  data$month %in% c(9, 10, 11) ~ "Fall"
)

# Calculate total sales and profit margins
data <- data %>%
  mutate(
    total_sales = sales * quantity,
    profit_margin = profit / sales * 100
  )

# Handle any missing or negative values
data <- data %>%
  filter(!is.na(total_sales) & !is.na(profit_margin))

# Group data by season, category, and region
aggregated_data <- data %>%
  group_by(season, category, region, segment) %>%
  summarise(
    avg_discount = mean(discount, na.rm = TRUE),
    total_sales = sum(total_sales, na.rm = TRUE),
    avg_profit_margin = mean(profit_margin, na.rm = TRUE),
    .groups = 'drop'
  )

# Normalize total_sales
data$total_sales_normalized <- (data$total_sales - min(data$total_sales, na.rm = TRUE)) /
                               (max(data$total_sales, na.rm = TRUE) - min(data$total_sales, na.rm = TRUE))

# Ensure categorical variables are treated as factors
data$category <- as.factor(data$category)
data$segment <- as.factor(data$segment)
data$region <- as.factor(data$region)
data$season <- factor(data$season, levels = c("Winter", "Spring", "Summer", "Fall"))
```

### Question 1: Seasonal Trends and Sales Performance:

```{r}
# Prepare data⁠
monthly_sales <- data %>%
  group_by(month, category) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

# Create the enhanced plot with a legend title
ggplot(monthly_sales, aes(x = month, y = total_sales, color = category)) +
  geom_line(size = 1) +                             
  geom_point(size = 2) +                            
  geom_smooth(method = "lm", se = FALSE,         
              linetype = "solid", color = "black", linewidth = 0.2) +
  labs(
    title = "Monthly Sales Trends by Category",
    x = "Month",
    y = "Total Sales",
    color = "Product Category") +
  theme_minimal(base_size = 14) +                   
  theme(
    plot.title = element_text(hjust = 0.5,           
                              size = 16,
                              family = "Arial"),
    plot.title.position = "plot",
    axis.text.x = element_text(hjust = 0.5,
                               size = 12,
                               family = "Arial"),          
    axis.title = element_text(hjust = 0.5,
                               size = 14,
                               family = "Arial"),
    axis.text = element_text(size = 12,
                             hjust = 0.5,
                             family = "Arial"),           
    panel.grid.major.x = element_blank(),          
    panel.grid.major.y = element_line(color = "gray", 
                                      linetype = "dashed"), 
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 12)     
  ) +
  scale_color_brewer(palette = "Set2") +           
  scale_x_continuous(breaks = 1:12, labels = 1:12) + 
  scale_y_continuous(labels = comma)              



```

```{r}
#| warning: false
#| message: false

# Data preparation (assuming 'data' contains the raw dataset)
seasonal_sales_malls <- data %>%
  group_by(season, region) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

# Static plot with all enhancements
p <- ggplot(seasonal_sales_malls, aes(x = season, y = total_sales, fill = region)) +
  # Bar plot with black outline for bars
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  
  # Add data labels
  geom_text(aes(label = comma(total_sales)), 
            position = position_dodge(width = 0.9), vjust = -0.3, size = 3) +
  
  # Faceted layout with fixed y-axis for all regions
  facet_wrap(~ region, scales = "fixed") +
  
  # Custom color palette
  scale_fill_brewer(palette = "OrRd") +
  
  # Annotations: Highlight specific values
  geom_text(aes(label = ifelse(total_sales > 50000, comma(total_sales), "")), 
            position = position_dodge(width = 0.9), vjust = -0.3, color = "black", size = 3.5) +
  
  # Labels and titles
  labs(
    title = "Seasonal Sales Variations by Region (Malls)", 
    x = "Season", 
    y = "Total Sales",
    fill = "Region"
  ) +
  
  # Polished theme
  theme_classic() +
  theme(
    plot.title = element_text(size = 14, family = "Arial", hjust = 0.5),
    axis.text = element_text(size = 10, family = "Arial", hjust = 0.5),
    axis.title = element_text(size = 12, family = "Arial", hjust = 0.5),
    legend.title = element_text(size = 12, family = "Arial", hjust = 0.5),
    legend.position = "top"
  )

# Interactive plot
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot

```

```{r}
# Bar plot for seasonal sales across categories
seasonal_category_sales <- data %>%
  group_by(season, category) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

ggplot(seasonal_category_sales, aes(x = season, y = total_sales, fill = category)) +
  geom_col(position = "dodge") +
  labs(
    title = "Seasonal Sales Across Categories",
    x = "Season",
    y = "Total Sales",
    fill = "Category"  # This sets the legend title
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "BuPu") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),  # Changed hjust to 0.5 for center alignment
    text = element_text(family = "Arial", size = 12),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  ) +
  scale_y_continuous(labels = comma)

```

```{r}
# Faceted heatmap plot for seasonal sales across regions and categories
faceted_data <- data %>%
  group_by(season, category, region) %>%
  summarise(total_sales = sum(total_sales, na.rm = TRUE), .groups = 'drop')

library(plotly)

# Create the ggplot2 plot as before
ggplot_plot <- ggplot(faceted_data, aes(x = season, y = category, fill = total_sales)) +
  geom_tile() +
  facet_wrap(~region) +
  labs(title = "Heatmap of Seasonal Sales by Category and Region", x = "Season", y = "Category") +
  scale_fill_gradient(
    low = "white",
    high = "blue",
    name = "Total Sales",
    breaks = scales::pretty_breaks(n = 5),
    labels = scales::label_comma()
  ) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Convert the ggplot2 plot to a plotly object
plotly_plot <- ggplotly(ggplot_plot)

# Customize the plotly plot (optional)
plotly_plot <- plotly_plot %>%
  layout(title = list(text = "Interactive Heatmap of Seasonal Sales", x = 0.5))

# Display the interactive plot
plotly_plot
```

### Question 2: Discounts, Sales Volumes, and Profit Margins

```{r}

data$discount <- data$discount * 100

# Scatter plot for discounts vs. sales volumes
ggplot(data, aes(x = discount, y = quantity)) +
  geom_point(alpha = 0.5, color = "blue") +
  labs(title = "Correlation Between Discounts and Sales Volumes", x = "Discount (%)", y = "Quantity Sold") +
  theme_minimal()

```

```{r}
#| message: false
ggplot(data, aes(x = discount, y = profit_margin)) +
  geom_point(alpha = 0.5, color = "salmon") +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Impact of Discounts on Profit Margins", x = "Discount (%)", y = "Profit Margin (%)") +
  theme_minimal() +
  theme(
     plot.title = element_text(hjust = 0.5, size = 14, family = "Arial"),
     axis.title = element_text(size = 10, family = "Arial")
  )
```

```{r}
# Create a correlation matrix
cor_matrix <- data %>%
  select(discount, quantity, profit_margin) %>%
  cor(use = "complete.obs")

# Visualize the correlation matrix as a heatmap
library(reshape2)
cor_melt <- melt(cor_matrix)

ggplot(cor_melt, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  labs(title = "Correlation Matrix: Discounts, Sales Volumes, and Profit Margins", x = "", y = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
# Install required package if not already installed
if (!require("plotly")) install.packages("plotly")

library(plotly)

plot_ly(data,
        x = ~discount,
        y = ~quantity,
        z = ~profit_margin,
        type = 'scatter3d',
        mode = 'markers',
        marker = list(size=3)) %>%
  layout(title="3D Scatter Plot: Discounts vs Sales vs Profit Margins",
         scene=list(
           xaxis=list(title="Discount"),
           yaxis=list(title="Quantity"),
           zaxis=list(title="Profit Margin")
         ))

```

```{r}
plot_ly(data,
        x = ~discount,
        y = ~quantity,
        z = ~profit_margin,
        type = 'scatter3d',
        mode = 'markers',
        marker = list(size = 6, opacity = 0.8, color = ~profit_margin, colorscale = 'Viridis', showscale = TRUE)) %>%
  layout(title="3D Scatter Plot: Discounts vs Sales vs Profit Margins",
         scene = list(
           xaxis = list(title = "Discount", tickangle = 45, tickmode = "array", tickvals = seq(0, 100, by = 10)),
           yaxis = list(title = "Quantity", tickangle = 45, tickmode = "array"),
           zaxis = list(title = "Profit Margin"),
           bgcolor = "#f3f3f3"
         ),
         plot_bgcolor = "#e5e5e5",
         paper_bgcolor = "#f5f5f5"
  )

```

```{r}
plot_ly(data,
        x = ~discount,
        y = ~quantity,
        z = ~profit_margin,
        type = 'scatter3d',
        mode = 'markers+text',
        marker = list(size = 6, opacity = 0.8, color = ~profit_margin, colorscale = 'Viridis', showscale = TRUE),
        text = ~paste("Discount: ", discount, "<br>Quantity: ", quantity, "<br>Profit Margin: ", profit_margin),
        textposition = 'top center') %>%
  layout(title="3D Scatter Plot: Discounts vs Sales vs Profit Margins",
         scene = list(
           xaxis = list(title = "Discount"),
           yaxis = list(title = "Quantity"),
           zaxis = list(title = "Profit Margin")
         ),
         plot_bgcolor = "#e5e5e5",
         paper_bgcolor = "#f5f5f5"
  )

```
